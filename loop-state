import boto3

def check_rds_cluster_existence(cluster_identifier, region='us-east-1'):
    """
    Check the existence of an Amazon RDS Aurora cluster.

    :param cluster_identifier: The identifier of the RDS Aurora cluster.
    :param region: AWS region (default: 'us-east-1').
    :return: True if the Aurora cluster exists, False otherwise.
    """
    try:
        client = boto3.client('rds', region_name=region)
        response = client.describe_db_clusters(DBClusterIdentifier=cluster_identifier)
        if response['DBClusters']:
            return True
        else:
            return False
    except Exception as e:
        print(f"Error checking Aurora cluster existence: {e}")
        return False

def describe_rds_cluster(cluster_identifier, region='us-east-1'):
    """
    Describe an Amazon RDS Aurora cluster.

    :param cluster_identifier: The identifier of the RDS Aurora cluster.
    :param region: AWS region (default: 'us-east-1').
    :return: Dictionary containing the details of the Aurora cluster.
    """
    try:
        client = boto3.client('rds', region_name=region)
        response = client.describe_db_clusters(DBClusterIdentifier=cluster_identifier)
        if response['DBClusters']:
            return response['DBClusters'][0]
        else:
            return None
    except Exception as e:
        print(f"Error describing Aurora cluster: {e}")
        return None

# Example usage
cluster_identifier_to_check = 'your_aurora_cluster_identifier'

if check_rds_cluster_existence(cluster_identifier_to_check):
    print(f"Aurora cluster '{cluster_identifier_to_check}' exists.")
    cluster_details = describe_rds_cluster(cluster_identifier_to_check)
    print("Aurora cluster details:")
    print(cluster_details)
else:
    print(f"Aurora cluster '{cluster_identifier_to_check}' does not exist.")

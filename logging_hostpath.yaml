apiVersion: apps/v1
kind: Deployment
metadata:
  name: myweb
  namespace: default
spec:
  replicas: 10
  selector:
    matchLabels:
      app: myweb
  template:
    metadata:
      labels:
        app: myweb
    spec:
      containers:
        - name: myweb-container
          image: <your-app-image>
          volumeMounts:
            - name: myweb-logs
              mountPath: /opt/mypath
              subPathExpr: $(POD_NAME)
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
      volumes:
        - name: myweb-logs
          hostPath:
            path: /var/myweb-logs
            type: DirectoryOrCreate
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: log-backup-truncator
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: log-backup-truncator
  template:
    metadata:
      labels:
        app: log-backup-truncator
    spec:
      containers:
        - name: backup-logs
          image: amazonlinux:2
          command:
            - /bin/sh
            - -c
            - |
              yum install -y gzip || true
              while true; do
                TODAY=$(date +%F)
                HOSTNAME=$(hostname)
                BACKUP_DIR=/mnt/efs/mybackups/${TODAY}/${HOSTNAME}
                mkdir -p ${BACKUP_DIR}

                echo "[INFO] Backing up logs to ${BACKUP_DIR}"

                find /var/myweb-logs -type f -name "*.log" | while read file; do
                  podname=$(basename $(dirname "$file"))
                  filename=$(basename "$file")
                  gzip -c "$file" > "${BACKUP_DIR}/${podname}-${filename}.gz"
                  echo "[INFO] Truncating $file"
                  truncate -s 0 "$file"
                done

                echo "[INFO] Sleeping for 24h"
                sleep 86400
              done
          volumeMounts:
            - name: myweb-logs
              mountPath: /var/myweb-logs
            - name: efs-backup
              mountPath: /mnt/efs
      restartPolicy: Always
      volumes:
        - name: myweb-logs
          hostPath:
            path: /var/myweb-logs
            type: Directory
        - name: efs-backup
          persistentVolumeClaim:
            claimName: efs-backup-pvc
---
LOGS_FOUND=$(find /var/myweb-logs -type f -name "*.log" | wc -l)
if [ "$LOGS_FOUND" -eq 0 ]; then
  echo "[INFO] No logs found on this node. Sleeping for 24h."
  sleep 86400
  continue
fi
---

#fluentbit config
[SERVICE]
    Flush         1
    Log_Level     info
    Parsers_File  parsers.conf
    Daemon        Off

@include inputs.conf
@include outputs.conf
---

[INPUT]
    Name              tail
    Path              /var/myweb-logs/*/*.log
    Tag               myweb.*
    DB                /var/log/flb_myweb.db
    Read_from_Head    true
    Refresh_Interval  10
    Rotate_Wait       30
    Skip_Long_Lines   On
    Buffer_Chunk_Size 512KB
    Buffer_Max_Size   5MB
---
[OUTPUT]
    Name            cloudwatch_logs
    Match           myweb.*
    region          <your-aws-region>
    log_group_name  /eks/myweb-app
    log_stream_prefix from-
    auto_create_group true
---
#fluentbit daemonset

volumes:
  - name: myweb-logs
    hostPath:
      path: /var/myweb-logs
      type: Directory

volumeMounts:
  - name: myweb-logs
    mountPath: /var/myweb-logs
---
[MULTILINE_PARSER]
    Name              multiline_java
    Type              regex
    Flush_Interval    2
    Key_Content       log
    Rule              "start_state"  "^[0-9]{4}-[0-9]{2}-[0-9]{2}.*"  "cont"
    Rule              "cont"         "^\\s+at .*"                    "cont"
    Rule              "cont"         "^[a-zA-Z].*"                   "cont"
---
[INPUT]
    Name              tail
    Path              /var/myweb-logs/*/*.log
    Tag               myweb.*
    Multiline.parser  multiline_java
    DB                /buffers/flb_myweb.db
    Read_from_Head    true


import boto3
import time
from botocore.exceptions import ClientError

def delete_all_objects(bucket_name, region, max_retries=5):
    s3 = boto3.client('s3', region_name=region)

    def list_versions_with_retries(bucket, retries=0):
        paginator = s3.get_paginator('list_object_versions')
        delete_marker_list = []
        version_list = []

        try:
            for page in paginator.paginate(Bucket=bucket):
                if 'Versions' in page:
                    version_list.extend(page['Versions'])
                if 'DeleteMarkers' in page:
                    delete_marker_list.extend(page['DeleteMarkers'])
        except ClientError as e:
            if retries < max_retries and e.response['Error']['Code'] == '504':
                time.sleep(2 ** retries)  # Exponential backoff
                return list_versions_with_retries(bucket, retries + 1)
            else:
                raise e

        return version_list, delete_marker_list

    version_list, delete_marker_list = list_versions_with_retries(bucket_name)

    # Create a list of objects to delete
    objects_to_delete = []

    for version in version_list:
        objects_to_delete.append({'Key': version['Key'], 'VersionId': version['VersionId']})

    for delete_marker in delete_marker_list:
        objects_to_delete.append({'Key': delete_marker['Key'], 'VersionId': delete_marker['VersionId']})

    # Delete the objects in batches of 1000
    if objects_to_delete:
        for i in range(0, len(objects_to_delete), 1000):
            response = s3.delete_objects(
                Bucket=bucket_name,
                Delete={
                    'Objects': objects_to_delete[i:i + 1000],
                    'Quiet': True
                }
            )
            print(response)

def disable_versioning(bucket_name, region):
    s3 = boto3.client('s3', region_name=region)
    response = s3.put_bucket_versioning(
        Bucket=bucket_name,
        VersioningConfiguration={
            'Status': 'Suspended'
        }
    )
    print(response)

def delete_bucket(bucket_name, region):
    s3 = boto3.client('s3', region_name=region)
    response = s3.delete_bucket(Bucket=bucket_name)
    print(response)

# Replace 'your-bucket-name' and 'your-region' with your bucket's name and region
bucket_name = 'your-bucket-name'
region = 'your-region'

delete_all_objects(bucket_name, region)
disable_versioning(bucket_name, region)
delete_bucket(bucket_name, region)

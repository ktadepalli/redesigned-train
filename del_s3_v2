import boto3
import time
from botocore.exceptions import ClientError
from datetime import datetime, timedelta

region = 'ap-east-1'
s3_client = boto3.client('s3', region_name=region)
def delete_objects_in_chunks(bucket_name, s3_client, max_retries=5, chunk_size=5 * 1024 ** 3):
    paginator = s3_client.get_paginator('list_object_versions')

    while True:
        delete_marker_list = []
        version_list = []
        total_size = 0

        for page in paginator.paginate(Bucket=bucket_name):
            if 'Versions' in page:
                for version in page['Versions']:
                    version_list.append(version)
                    total_size += version['Size']
                    if total_size >= chunk_size:
                        break
            if 'DeleteMarkers' in page:
                delete_marker_list.extend(page['DeleteMarkers'])

            if total_size >= chunk_size:
                break

        if not version_list and not delete_marker_list:
            break

        objects_to_delete = [{'Key': version['Key'], 'VersionId': version['VersionId']} for version in version_list]
        objects_to_delete.extend({'Key': delete_marker['Key'], 'VersionId': delete_marker['VersionId']} for delete_marker in delete_marker_list)

        if objects_to_delete:
            for i in range(0, len(objects_to_delete), 1000):
                batch = objects_to_delete[i:i + 1000]
                try:
                    response = s3_client.delete_objects(
                        Bucket=bucket_name,
                        Delete={'Objects': batch, 'Quiet': True}
                    )
                    print(f"Deleted batch {i // 1000 + 1}: {response}")
                except ClientError as e:
                    print(f"Error deleting batch {i // 1000 + 1}: {e}")
                    if e.response['Error']['Code'] in ['Throttling']:
                        time.sleep(2 ** (i // 1000))  # Exponential backoff for throttling errors

        total_size = 0

def disable_versioning(bucket_name, s3_client):
    response = s3_client.put_bucket_versioning(
        Bucket=bucket_name,
        VersioningConfiguration={'Status': 'Suspended'}
    )
    print(f"Versioning suspended: {response}")


# Main execution with credential refresh handling
def main():
    bucket_name = 'your-bucket-name'
    disable_versioning(bucket_name, region)
    delete_objects_in_chunks(bucket_name, region)

if __name__ == '__main__':
    main()
